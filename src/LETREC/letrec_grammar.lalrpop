use std::str::FromStr;

use LETREC::ast::Exp;
use std::rc::Rc;

grammar;

pub Program: Exp = {
  <exp1:Expression> => *exp1
}

Expression: Box<Exp> = {
  <n:Num> => Box::new(Exp::Const(n)),
  "-" "(" <exp1:Expression> "," <exp2:Expression> ")" => Box::new(Exp::Diff(exp1, exp2)),
  "zero?" "(" <exp1:Expression> ")" => Box::new(Exp::IsZero(exp1)),
  "if" <exp1:Expression> "then" <exp2:Expression> "else" <exp3:Expression> =>
     Box::new(Exp::If(exp1, exp2, exp3)),
  <var:Identifier> => Box::new(Exp::Var(var)),
  "let" <var:Identifier> "=" <exp1:Expression> "in" <exp2:Expression> =>
    Box::new(Exp::Let(var, exp1, exp2)),
  "letrec" <p_name:Identifier> "(" <b_var:Identifier> ")" "=" <p_body:Expression> "in" <letrec_body:Expression> =>
    Box::new(Exp::LetRec(p_name, b_var, Rc::new(*p_body), letrec_body)),
  "proc" "(" <var:Identifier> ")" <body:Expression> => Box::new(Exp::Proc(var, Rc::new(*body))),
  "(" <exp1:Expression> <exp2:Expression> ")" => Box::new(Exp::Call(exp1, exp2))
};

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

Identifier: String = <s:r"[a-z]+"> => s.to_string();
